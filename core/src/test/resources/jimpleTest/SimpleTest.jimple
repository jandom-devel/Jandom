public class SimpleTest extends java.lang.Object
{
    int classX;
    int classY;
    int sum;

    static void sequential()
    {
        return;
    }

    static void conditional()
    {
        int x;

        x = 0;

        if x <= 10 goto label1;

        goto label2;

     label1:
        goto label2;

     label2:
        return;
    }

    static void loop()
    {
        int x, temp$0, temp$1;

        x = 0;

     label1:
        if x < 10 goto label2;

        goto label3;

     label2:
        temp$0 = x;

        temp$1 = temp$0 + 1;

        x = temp$1;

        goto label1;

     label3:
        return;
    }

    static void nested()
    {
        int i, j, temp$2, temp$3, temp$4, temp$5;

        i = 0;

     label1:
        if i < 10 goto label2;

        goto label6;

     label2:
        j = 0;

     label3:
        if j < i goto label4;

        goto label5;

     label4:
        temp$2 = j;

        temp$3 = temp$2 + 1;

        j = temp$3;

        goto label3;

     label5:
        temp$4 = i;

        temp$5 = temp$4 + 1;

        i = temp$5;

        goto label1;

     label6:
        return;
    }

    static void longassignment()
    {
        int i, j, temp$4, temp$5, temp$6, temp$7;

        i = 0;

     label1:
        if i < 10 goto label2;

        goto label6;

     label2:
        j = 0;

     label3:
        if j < i goto label4;

        goto label5;

     label4:
        temp$4 = j;

        temp$5 = temp$4 + 1;

        j = temp$5;

        goto label3;

     label5:
        temp$6 = i;

        temp$7 = temp$6 + 1;

        i = temp$7;

        goto label1;

     label6:
        return;
    }

    static void topologicalorder()
    {
        int z;

        z = 1;

        if z != 1 goto label1;

        goto label2;

     label1:
        goto label2;

     label2:
        return;
    }

    static int parametric_static(int, int)
    {
        int x, y, temp$0, temp$1;

        x := @parameter0: int;

        y := @parameter1: int;

        temp$0 = x;

        temp$1 = temp$0 + y;

        return temp$1;
    }

    int parametric_dynamic(int, int)
    {
        SimpleTest this;
        int x, y, temp$0, temp$1, temp$2;

        this := @this: SimpleTest;

        x := @parameter0: int;

        y := @parameter1: int;

        this.<SimpleTest: int classX> = x;

        this.<SimpleTest: int classY> = y;

        temp$0 = x;

        temp$1 = temp$0 + y;

        this.<SimpleTest: int sum> = temp$1;

        temp$2 = this.<SimpleTest: int sum>;

        return temp$2;
    }

    static int parametric_caller(int, int)
    {
        int x, y, temp$0, temp$1, z, temp$2;

        x := @parameter0: int;

        y := @parameter1: int;

        temp$0 = 3;

        x = temp$0;

        temp$1 = 4;

        y = temp$1;

        temp$2 = staticinvoke <SimpleTest: int parametric_static(int,int)>(x, y);

        z = temp$2;

        return z;
    }

    static int recursb(int)
    {
        int x, temp$0, temp$1, temp$2;

        x := @parameter0: int;

        temp$0 = x;

        temp$1 = temp$0 + 1;

        temp$2 = staticinvoke <SimpleTest: int recursa(int)>(temp$1);

        return temp$2;
    }

    static int recursa(int)
    {
        int x, temp$0;

        x := @parameter0: int;

        if x < 0 goto label1;

        goto label2;

     label1:
        temp$0 = staticinvoke <SimpleTest: int recursb(int)>(x);

        return temp$0;

     label2:
        return x;
    }

    static void mycast()
    {
        short s1, s2;
        byte z;
        int temp$0, temp$1, temp$2, i, temp$3, temp$4, temp$5, temp$6, temp$7;
        long l;
        float f1, f2;
        double d;

        s1 = 103;

        s2 = 104;

        temp$0 = (int) s1;

        temp$1 = (int) s2;

        temp$2 = temp$0 + temp$1;

        z = (byte) temp$2;

        temp$3 = (int) s1;

        temp$4 = (int) s2;

        i = temp$3 + temp$4;

        temp$5 = (int) s1;

        temp$6 = (int) s2;

        temp$7 = temp$5 + temp$6;

        l = (long) temp$7;

        f1 = (float) s1;

        f2 = (float) i;

        d = (double) i;

        return;
    }

    static void complexif()
    {
        int x, y, temp$0;

        x = 0;

        y = 0;

        temp$0 = 2 * x;

        if temp$0 < y goto label1;

        goto label1;

     label1:
        return;
    }

    static void objcreation()
    {
        A a1, temp$0, temp$1, temp$5;
        ListA l, temp$2, temp$3, temp$4;

        temp$0 = new A;

        specialinvoke temp$0.<A: void <init>()>();

        a1 = temp$0;

        temp$1 = new A;

        specialinvoke temp$1.<A: void <init>()>();

        temp$2 = new ListA;

        specialinvoke temp$2.<ListA: void <init>()>();

        l = temp$2;

        l.<ListA: A v> = a1;

        temp$3 = l.<ListA: ListA next>;

        temp$4 = l.<ListA: ListA next>;

        temp$3.<ListA: ListA next> = temp$4;

        temp$5 = l.<ListA: A v>;

        return;
    }

    static void classrefinement()
    {
        A temp$0, temp$3;
        B b, temp$1;
        Pair p, temp$2;

        temp$0 = new A;

        specialinvoke temp$0.<A: void <init>()>();

        temp$1 = new B;

        specialinvoke temp$1.<B: void <init>()>();

        b = temp$1;

        temp$2 = new Pair;

        specialinvoke temp$2.<Pair: void <init>()>();

        p = temp$2;

        p.<Pair: B w> = b;

        temp$3 = p.<Pair: A v>;

        return;
    }

    static Pair class_parametric(A)
    {
        A a, temp$1;
        Pair p, temp$0;

        a := @parameter0: A;

        temp$0 = new Pair;

        specialinvoke temp$0.<Pair: void <init>()>();

        p = temp$0;

        p.<Pair: A v> = a;

        temp$1 = new A;

        specialinvoke temp$1.<A: void <init>()>();

        return p;
    }

    static ListA pair_one(A, B)
    {
        A a;
        B b;
        ListA l, temp$0, temp$1;

        a := @parameter0: A;

        b := @parameter1: B;

        temp$0 = new ListA;

        specialinvoke temp$0.<ListA: void <init>()>();

        l = temp$0;

        l.<ListA: A v> = a;

        temp$1 = staticinvoke <SimpleTest: ListA pair_one(A,B)>(a, b);

        l.<ListA: ListA next> = temp$1;

        return l;
    }

    public void <init>()
    {
        SimpleTest this;

        this := @this: SimpleTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }
}
