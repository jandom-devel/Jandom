/**
 * Copyright 2015 Gianluca Amato <gamato@unich.it>
 *
 * This file is part of JANDOM: JVM-based Analyzer for Numerical DOMains
 * JANDOM is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * JANDOM is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty ofa
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with JANDOM.  If not, see <http://www.gnu.org/licenses/>.
 */

package it.unich.jandom.utils

import org.scalatestplus.scalacheck.ScalaCheckPropertyChecks
import org.scalatest.funsuite.AnyFunSuite

class RelationSuite extends AnyFunSuite with ScalaCheckPropertyChecks {

  def testEmpty(r: Relation[Int, Int]): Unit = {
    assert(r.isEmpty)
    assert(r.graph.isEmpty)
    forAll { (x: Int, y: Int) => assert(!r(x, y)) }
    forAll { (x: Int) => assert(r.image(x).isEmpty) }
    assert(r.domain.isEmpty)
  }

  def testMap(r: Relation[Int, Int], m: Map[Int, Set[Int]]): Unit = {
    assert(r == r)
    assertResult(Some(0))(r tryCompareTo r)
    assertResult(m.forall( _._2.isEmpty))(r.isEmpty)
    for (u <- m.keySet; v <- m(u)) assert(r(u, v))
    for (u <- m.keySet) assertResult(m(u))(r.image(u))
    forAll { (u: Int, v: Int) =>
      whenever((!m.contains(u)) || (!(m(u) contains v))) {
        assert(!r(u, v))
      }
    }
    forAll { (u: Int) =>
      whenever(!m.contains(u)) {
        assert(r.image(u).isEmpty)
      }
    }
  }

  test("Empty relations") {
    val r1 = Relation.empty[Int, Int]
    val r2 = Relation(Set.empty[Int], { (x: Int) => Set.empty[Int] })
    val r3 = Relation(Map.empty[Int, Set[Int]])
    val r4 = Relation(Set.empty[(Int, Int)])
    val r5 = Relation[Int,Int]()
    val emptys = Seq(r1,r2,r3,r4,r5)    
    for (e <- emptys) {
      testEmpty(e)
      testEmpty(e.inverse)
    }
    for (e <- emptys; f <- emptys) {
      assert(e==f)
      assert(e.tryCompareTo(f) == Some(0))      
    }
  }

  test("Non empty relations generated by maps") {
    forAll { (m: Map[Int, Set[Int]]) =>
      testMap(Relation(m), m)
    }
  }

  test("Non empty relations generated by function") {
    forAll { (m: Map[Int, Set[Int]]) =>
      testMap(Relation(m), m)
      val dom = m.keySet
      val f = { (u: Int) => m.getOrElse(u, Set.empty[Int]) }
      testMap(Relation(dom, f), m)
    }
  }

  test("Non empty relations generated by graphs") {
    forAll { (m: Map[Int, Set[Int]]) =>
      testMap(Relation(m), m)
      val graph = for (u <- m.keySet; v <- m(u)) yield (u, v)
      testMap(Relation(graph), m)
    }
  }

  test("Non empty relations generated by sequences") {
    forAll { (m: Map[Int, Set[Int]]) =>
      testMap(Relation(m), m)
      val graph = for (u <- m.keySet.view; v <- m(u)) yield (u, v)
      testMap(Relation(graph.toSeq: _*), m)
    }
  }
  
  test("Equality and partial order") {
    val r1 = Relation.empty[Int,Int]
    val r2 = Relation( (1,1), (2,3))
    val r3 = Relation( (1,1), (1,2), (2,2), (2,3) )   
    val r4 = Relation( (4,4) )
    assert(r1 != r2)
    assert(r1 != r3)
    assert(r2 != r3)
    assert(r1 < r2)
    assert(r2 < r3) 
    assert(r1 < r4)
    assertResult(None)(r2 tryCompareTo r4)
    assertResult(None)(r3 tryCompareTo r4)
  }
}
